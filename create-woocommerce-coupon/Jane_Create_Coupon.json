{
  "name": "Jane Create Coupon",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "code"
            },
            {
              "name": "amount"
            },
            {
              "name": "discount_type"
            },
            {
              "name": "description"
            },
            {
              "name": "date_expires"
            },
            {
              "name": "individual_use"
            },
            {
              "name": "product_ids"
            },
            {
              "name": "excluded_product_ids"
            },
            {
              "name": "usage_limit"
            },
            {
              "name": "usage_limit_per_user"
            },
            {
              "name": "limit_usage_to_x_items"
            },
            {
              "name": "minimum_amount"
            },
            {
              "name": "maximum_amount"
            },
            {
              "name": "email_restrictions"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1040,
        60
      ],
      "id": "35cd8b64-3a9d-4775-828e-478f54484b27",
      "name": "When Executed by Another Workflow",
      "notesInFlow": true,
      "notes": "discount_type: Determines the type of discount that will be applied. Options: percent, fixed_cart and fixed_product. Default is fixed_cart.\n\nemail_restrictions: List of email addresses that can use this coupon."
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://demo.aigency.asia/wp-json/wc/v3/coupons",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "wooCommerceApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -300,
        40
      ],
      "id": "b337afc6-229d-4e50-a6fc-181791a21a0d",
      "name": "HTTP Request",
      "alwaysOutputData": true,
      "credentials": {
        "wooCommerceApi": {
          "id": "lmCx2zQ9YsCHbk8W",
          "name": "Demo AIGency 2"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "function isEmpty(val) {\n  return val === null || val === undefined || val === '';\n}\n\nfunction mergeSkipNullEmpty(defaultObj, overrideObj) {\n  const result = { ...defaultObj };\n  for (const key in overrideObj) {\n    if (\n      !isEmpty(overrideObj[key]) ||\n      !(key in defaultObj)\n    ) {\n      result[key] = overrideObj[key];\n    }\n    // If overrideObj[key] is empty and key exists in defaultObj, skip override\n    // If overrideObj[key] is empty and key does NOT exist in defaultObj, add it\n  }\n  return result;\n}\n\n\n\n\nfunction createCouponCode(length = 8, prefix = \"AMY\") {\n  if (length < prefix.length + 1) {\n    throw new Error(\"Length must be greater than prefix length\");\n  }\n  \n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let code = prefix.toUpperCase();\n  \n  for (let i = 0; i < length - prefix.length; i++) {\n    const randomIndex = Math.floor(Math.random() * characters.length);\n    code += characters[randomIndex];\n  }\n  return code;\n}\n\nfunction removeNullEmpty(obj) {\n  const isEmpty = (value) => \n    value === null ||\n    value === \"\" ||\n    (Array.isArray(value) && value.length === 0) ||\n    (typeof value === \"object\" && Object.keys(value).length === 0);\n\n  const cleanObject = (input) => {\n    if (typeof input !== \"object\" || input === null || Array.isArray(input)) {\n      return input;\n    }\n\n    return Object.fromEntries(\n      Object.entries(input)\n        .filter(([_, value]) => !isEmpty(value))\n        .map(([key, value]) => [\n          key,\n          typeof value === \"object\" ? cleanObject(value) : value\n        ])\n    );\n  };\n\n  return cleanObject(obj);\n}\n// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const defaultConfig = {\n    \"discount_type\": \"fixed_cart\",\n    \"individual_use\": false,\n    \"free_shipping\": true,\n    \"exclude_sale_items\": false,\n    \"code\": \"\",\n    \"amount\": \"0\",\n  };\n  defaultConfig.code = createCouponCode();\n  item.json = mergeSkipNullEmpty(defaultConfig, item.json);\n  if (item.json.amount){\n   item.json.amount = item.json.amount.toString(); \n  }\n  item.json = removeNullEmpty(item.json);\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -820,
        60
      ],
      "id": "403fff07-7b95-48cd-b876-ac8531c63d50",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0df30907-a760-4612-87b8-f307a621d3ea",
              "leftValue": "={{ $json.amount }}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "ff39d1ce-c355-489c-974d-9be3da6d5644",
              "leftValue": "={{ $json.code }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -600,
        60
      ],
      "id": "f3aa3b35-7b67-4276-a9e0-175a74a7a664",
      "name": "If has enough info"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "code": null,
          "amount": 10000,
          "discount_type": null,
          "description": null,
          "date_expires": null,
          "individual_use": null,
          "product_ids": null,
          "excluded_product_ids": null,
          "usage_limit": null,
          "usage_limit_per_user": null,
          "limit_usage_to_x_items": null,
          "minimum_amount": null,
          "maximum_amount": null,
          "email_restrictions": null
        }
      }
    ]
  },
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If has enough info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If has enough info": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8f1d629a-4f4c-4ca6-9d1e-30a7a6101135",
  "meta": {
    "instanceId": "9c670197868e529fc0e68044a8615b0e65e4296010a61c8a31e0d5b19f98213f"
  },
  "id": "pup5jMGTWlvC4sU0",
  "tags": [
    {
      "createdAt": "2025-05-27T07:48:14.354Z",
      "updatedAt": "2025-05-27T07:48:14.354Z",
      "id": "LJxeCc7FVWOnBNVB",
      "name": "jane"
    }
  ]
}